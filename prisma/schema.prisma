generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  name            String?
  password        String
  company         String?
  role            String          @default("user")
  image           String?
  position        String?
  bio             String?
  expertise       String[]
  socialLinks     Json?
  phoneNumber     String?
  address         String?
  timezone        String?         @default("UTC")
  lastLoginAt     DateTime?
  isEmailVerified Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  activities      Activity[]
  campaigns       Campaign[]
  hubspotAccounts HubspotAccount[]
  metaAccounts    MetaAccount[]
  notifications   Notification[]
  reports         Report[]
  settings        UserSettings?
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("system")
  language           String   @default("en")
  timezone           String   @default("UTC")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  marketingEmails    Boolean  @default(false)
  apiKey             String?
  webhookUrl         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id            String      @id @default(cuid())
  userId        String
  campaignId    String
  name          String
  status        String
  objective     String?
  spendCap      Float?
  dailyBudget   Float?
  startTime     DateTime?
  endTime       DateTime?
  lastUpdated   DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  metaAccountId String
  activities    Activity[]
  adSets        AdSet[]
  analytics     Analytics[]
  metaAccount   MetaAccount @relation(fields: [metaAccountId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports       Report[]

  @@unique([userId, campaignId])
  @@index([userId])
}

model AdSet {
  id          String    @id @default(cuid())
  name        String
  campaignId  String
  status      String
  budget      Float?
  bidStrategy String?
  targeting   Json?
  metrics     Json?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
}

model Analytics {
  id              String   @id @default(cuid())
  campaignId      String
  data            Json
  metrics         Json
  insights        Json?
  recommendations Json?
  date            DateTime
  createdAt       DateTime @default(now())
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model Report {
  id            String    @id @default(cuid())
  name          String
  type          String
  content       Json
  format        String    @default("pdf")
  schedule      Json?
  lastGenerated DateTime?
  campaignId    String
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  campaign      Campaign  @relation(fields: [campaignId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String    @id @default(cuid())
  title     String
  message   String
  type      String
  category  String
  read      Boolean   @default(false)
  actionUrl String?
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Activity {
  id          String    @id @default(cuid())
  type        String
  description String
  metadata    Json?
  userId      String
  campaignId  String?
  createdAt   DateTime  @default(now())
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MetaAccount {
  id           String     @id @default(cuid())
  name         String?
  accountId    String
  accessToken  String
  status       String     @default("active")
  permissions  String[]
  userId       String
  lastSyncedAt DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  campaigns    Campaign[]
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, accountId])
  @@index([userId])
  @@index([accountId])
}

model HubspotAccount {
  id                String     @id @default(cuid())
  name              String?
  accountId         String     // HubSpot Portal ID
  appId             String?    // OAuth App ID
  clientSecret      String?    // OAuth Client Secret
  privateKey        String?    // Private App Key
  authType          String     @default("oauth") // oauth or private
  status            String     @default("active")
  permissions       String[]   // Granted permissions
  userId            String
  user              User       @relation(fields: [userId], references: [id])
  contacts          HubspotContact[]
  deals             HubspotDeal[]
  lastSyncedAt      DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([userId, accountId])
  @@index([userId])
  @@index([accountId])
}

model HubspotContact {
  id                String     @id @default(cuid())
  hubspotId         String     // HubSpot Contact ID
  email             String
  firstName         String?
  lastName          String?
  phone             String?
  company           String?
  jobTitle          String?
  lifecycle_stage   String?
  properties        Json?      // Additional properties
  hubspotAccountId  String
  hubspotAccount    HubspotAccount @relation(fields: [hubspotAccountId], references: [id])
  deals             HubspotDeal[]
  lastSyncedAt      DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([hubspotAccountId, hubspotId])
  @@index([email])
}

model HubspotDeal {
  id                String     @id @default(cuid())
  hubspotId         String     // HubSpot Deal ID
  name              String
  stage             String
  amount            Float?
  closeDate         DateTime?
  pipeline          String?
  properties        Json?      // Additional properties
  hubspotAccountId  String
  hubspotAccount    HubspotAccount @relation(fields: [hubspotAccountId], references: [id])
  contacts          HubspotContact[]
  lastSyncedAt      DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([hubspotAccountId, hubspotId])
  @@index([stage])
}
